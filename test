#!/usr/bin/env bash

# script to extract plugin information of a Moodle installation based on Git submodule information
# m.opitz@qmul.ac.uk | 2021-03-31

# v.0.7 - work in progress
# v.0.8 - added options
# 210416 - removed branch in favour of tag
# 210611 - added githuburl
# 210615 - when there is no pluginname check for filtername
# 210707 - using branch for tag when there is no tag, stripping tag from unwanted chars

version=210707

bold=$(tput bold)
normal=$(tput sgr0)

# get options
while getopts ":f:lv" x; do
    case "${x}" in
        f)
            filter=${OPTARG}
            ;;
        l)
			logging=1
			;;
        v)
			verbose=1
			;;
        *)
            echo "invalid option - aborting"
            echo
            exit 1
            ;;
    esac
done
shift $((OPTIND-1))

echo " "
echo "${bold}Moo${normal}dle ${bold}P${normal}lugin ${bold}I${normal}nformation ${bold}E${normal}xtractor - version $version"
echo "------------------------------------------------------"
echo " "

if [ ! $1 ]
then
	echo 'No path given - aborting!'
	echo 'Use: extract <path/to/moodle>'
	echo
	exit 1
fi
moodle_path=$1

if [ ! -d "$moodle_path" ]
then
	echo "No Moodle installation found at $moodle_path - aborting!"
	echo
	exit 1
fi

if [ ! -f "$moodle_path/course/renderer.php" ]
then
	echo "No proper Moodle installation found at $moodle_path - aborting!"
	echo
	exit 1
fi

walk_dir () {
    for plugin_path in "$1"/*; do
        if [[ -d "$plugin_path" ]]; then

        	if [[ -f "$plugin_path/.git" ]]; then # if there is a '.git' FILE this is a GIT submodule
            	git_path=$(cat "$plugin_path/.git")
            	git_path="${git_path//gitdir: }" # remove "gitdir: "
           		git_path="${git_path//..\/}" # remove all "../" in front of the path

            	config_path=$moodle_path/$git_path/config
            	head_path=$moodle_path/$git_path/HEAD
            	head=$(cat $head_path)
#echo "==> head = $head"
            	url=''

				if [[ $config_path = *$filter* ]] # if the config path contains the filter text do this
				then
	            	[[ $verbose ]] && echo "${bold}$plugin_path${normal}"
	            	[[ $verbose ]] && echo

					# get the URL and
	            	while IFS= read -r line
					do
						if [[ $line = *url* ]] && [[ $url = '' ]] # get only the 1st URL from the config file
						then
						    url="${line//$'\t'url = }" #remove leading tab and 'url = '

						    # construct the GitHub URL
						    githuburl="${url//git@github.com:}"
						    githuburl="https://github.com/${githuburl//.git}"
						fi

						if [[ $line = *worktree* ]]
						then
						    moodle_plugin="${line//$'\t'worktree = }" #remove 'worktree = '
           					moodle_plugin="${moodle_plugin//..\/}" # remove all "../" in front of the path
						fi
					done < "$config_path"

					# Get the name of the plugin from the english language file
          langfile=$(ls $plugin_path/lang/en/ | head -n 1) #take the 1st language file you can find - usually there should be only 1
          pluginname=$(cat $plugin_path/lang/en/$langfile | grep -m 1 "'pluginname'")
          # if the pluginnname is empty look for a filtername
          if [[ $pluginname = "" ]]; then
            pluginname=$(cat $plugin_path/lang/en/$langfile | grep -m 1 "'filtername'")
            pluginname="${pluginname//\$string\[\'filtername\'\] = \'}"
          else
            pluginname="${pluginname//\$string\[\'pluginname\'\] = \'}"
          fi
          #pluginname="${pluginname//\';}"
          pluginname=$(echo $pluginname | tr -d "\r\n';")

        # get branch and commit ID
        if [[ $head = *ref:* ]]
        then
            head=${head//ref: }
            commit=$(cat $moodle_path/$git_path/$head)
            branch=${head//refs\/heads\/}
        else
            commit=$head
            branch="default"
            if [ -f $moodle_path/$git_path/FETCH_HEAD ]; then
              echo "==> trying to find a branch/tag in FETCH_HEAD"
              rawline=$(cat $moodle_path/$git_path/FETCH_HEAD | grep $commit | head -n 1 ) # use 1st match
              echo "$rawline"
              fetch_branch=$(echo $rawline  | awk -F\' '{print $(NF-1)}')
              echo "fetch_branch = $fetch_branch"
              if [[ $fetch_branch ]]; then
                branch=$fetch_branch
              fi
            fi
        fi

        # get the current tag
          refs_path=$moodle_path/$git_path/packed-refs
          ref=$(cat $refs_path | grep $commit)
					echo "refs_path = $refs_path"
#					echo "$(cat $refs_path)"
					echo "ref = $ref"
          if [[ $ref ]]
          then
            A="$(cut -d' ' -f2 <<<$ref)"
            tag=$(basename "$A")
            #tag=$(echo $tag | tr -dc '[:alnum:]\n\r')
            tag=$(echo "${tag//[^[:alnum:]_.-]/}")

          else
            tag=$branch
            # unset tag
          fi

          # get the version
					rohversion=$(cat "$plugin_path/version.php" | grep '$plugin->version')
					version=$(echo $rohversion| cut -d'=' -f 2)
					version=$(echo $version| cut -d';' -f 1)

					echo "Name = $pluginname"
					echo "Repository = $url"
					[[ $verbose ]] && echo "GitHub URL = $githuburl"
					[[ $verbose ]] && echo "Moodle Plugin = $moodle_plugin"
					echo "head_path = $head_path"
					echo "HEAD = $head"
					echo "branch = $branch"
					echo "tag = $tag"
					echo "commit ID = $commit"
					[[ $verbose ]] && echo "Version = $version"

          echo && echo "------------------------------------" && echo

					[[ $verbose ]] || printf "."
					((counter=counter+1))
				    if [ $(expr $counter % 20) = "0" ]; then
				        echo " $counter"
				    fi

#	            	echo "$pluginname,$moodle_plugin,$url,$githuburl,$developer,$version,$tag,$branch,$commit" >> $export_file
				fi
   			else
   				walk_dir "$plugin_path"
        	fi
        fi
    done
}

counter=0

walk_dir "$moodle_path"

echo "Extracted information about $counter plugins."
echo
