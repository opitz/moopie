#!/usr/bin/env bash

# script to extract plugin information of a Moodle installation based on Git submodule information
# m.opitz@qmul.ac.uk | 2021-03-31

# v.0.7 - work in progress
# v.0.8 - added options
# 210416 - removed branch in favour of tag
# 210611 - added githuburl
# 210615 - when there is no pluginname check for filtername
# 210707 - using branch for tag when there is no tag, stripping tag from unwanted chars

version=210707

bold=$(tput bold)
normal=$(tput sgr0)

# get options
while getopts ":f:lv" x; do
    case "${x}" in
        f)
            filter=${OPTARG}
            ;;
        l)
			logging=1
			;;
        v)
			verbose=1
			;;
        *)
            echo "invalid option - aborting"
            echo
            exit 1
            ;;
    esac
done
shift $((OPTIND-1))

echo " "
echo "${bold}Moo${normal}dle ${bold}P${normal}lugin ${bold}I${normal}nformation ${bold}E${normal}xtractor - version $version"
echo "------------------------------------------------------"
echo " "

if [ ! $1 ]
then
	echo 'No path given - aborting!'
	echo 'Use: extract <path/to/moodle>'
	echo
	exit 1
fi
moodle_path=$1

if [ ! -d "$moodle_path" ]
then
	echo "No Moodle installation found at $moodle_path - aborting!"
	echo
	exit 1
fi

if [ ! -f "$moodle_path/course/renderer.php" ]
then
	echo "No proper Moodle installation found at $moodle_path - aborting!"
	echo
	exit 1
fi

if [ ! $2 ]
then
	export_file=$(basename "$moodle_path").csv
	echo "No explicit export file given - creating default file $export_file!"
	echo
else
	export_file=$2
	fileext=${export_file##*.}
	if [[ $export_file == $fileext ]]
	then
		export_file="$export_file.csv"
	fi
	if [[ ! $fileext ]]
	then
		export_file="$export_file.csv"
		export_file="${export_file//../.}"
	fi
fi

[ $filter ] && echo "==> Filtered by '$filter'"

echo "==> Exporting into $export_file"

logfile="${export_file%.*}.log"

[ $logging ] && echo "==> Logging into $logfile"
[ $logging ] && echo "Extracting plugin information from $moodle_path at: $(date)" > $logfile
[ $logging ] && [ $filter ] && echo "==> Filtered by '$filter'" >> $logfile
[ $logging ] && echo >> $logfile

# Provide a header line for the export file
echo "Name,Path,Repository,GitHubURL,Developer,Version,Tag,Commit" > $export_file

# Moodle core data
moodle_branch=$(cat $moodle_path/.git/HEAD)
moodle_branch=${moodle_branch//ref: }
moodle_branch=${moodle_branch//refs\/heads\/}

moodle_version=$(cat $moodle_path/version.php | grep -m 1 '$release')
moodle_version=${moodle_version//e = }
moodle_version=$(echo "$moodle_version" | cut -d"'" -f 2) # get the text between two single quotes

moodle_repository=$(cat $moodle_path/.git/config | grep -m 1 url)
moodle_repository=${moodle_repository//url = }
moodle_repository="$(echo -e "${moodle_repository}" | sed -e 's/^[[:space:]]*//')" # get rid of leading spaces

echo "Moodle core,/,$moodle_repository,,,$moodle_version,$moodle_branch," >> $export_file


walk_dir () {
    for plugin_path in "$1"/*; do
        if [[ -d "$plugin_path" ]]; then

        	if [[ -f "$plugin_path/.git" ]]; then # if there is a '.git' FILE this is a GIT submodule
            	git_path=$(cat "$plugin_path/.git")
            	git_path="${git_path//gitdir: }" # remove "gitdir: "
           		git_path="${git_path//..\/}" # remove all "../" in front of the path
            	config_path=$moodle_path/$git_path/config
            	head_path=$moodle_path/$git_path/HEAD
            	head=$(cat $head_path)
            	url=''

				if [[ $config_path = *$filter* ]] # if the config path contains the filter text do this
				then
	            	[[ $verbose ]] && echo "${bold}$plugin_path${normal}"
	            	[[ $verbose ]] && echo

	            	[[ $logging ]] && echo "Plugin path = $plugin_path" >> $logfile
	            	[[ $logging ]] && echo >> $logfile

					# get the URL and
	            	while IFS= read -r line
					do
						if [[ $line = *url* ]] && [[ $url = '' ]] # get only the 1st URL from the config file
						then
						    url="${line//$'\t'url = }" #remove leading tab and 'url = '

						    # construct the GitHub URL
						    githuburl="${url//git@github.com:}"
						    githuburl="https://github.com/${githuburl//.git}"
						fi

						if [[ $line = *worktree* ]]
						then
						    moodle_plugin="${line//$'\t'worktree = }" #remove 'worktree = '
           					moodle_plugin="${moodle_plugin//..\/}" # remove all "../" in front of the path
						fi
					done < "$config_path"

					# Get the name of the plugin from the english language file
          langfile=$(ls $plugin_path/lang/en/ | head -n 1) #take the 1st language file you can find - usually there should be only 1
          pluginname=$(cat $plugin_path/lang/en/$langfile | grep -m 1 "'pluginname'")
          # if the pluginnname is empty look for a filtername
          if [[ $pluginname = "" ]]; then
            pluginname=$(cat $plugin_path/lang/en/$langfile | grep -m 1 "'filtername'")
            pluginname="${pluginname//\$string\[\'filtername\'\] = \'}"
          else
            pluginname="${pluginname//\$string\[\'pluginname\'\] = \'}"
          fi
          #pluginname="${pluginname//\';}"
          pluginname=$(echo $pluginname | tr -d "\r\n';")

          # get the developer from the copyright line in the version.php file of a plugin
          versionfile=$plugin_path/version.php
          developer=$(cat $plugin_path/version.php | grep -m 1 copyright) # grep the copyright line
          developer=${developer//* @copyright}
          developer="$(echo -e "${developer}" | sed -e 's/^[[:space:]]*//')" # get rid of leading spaces
          #developer=$(echo $developer | tr -d "\r\n';")
#                	developer=$(echo $developer | sed -e 's/,/\\,/g')
          developer="${developer//,/ }"
          developer="${developer//  }"
          developer="${developer//\*}"
          developer=$(echo $developer | tr -d "\r\n")


					# get branch and commit ID
					if [[ $head = *ref:* ]]
					then
						head=${head//ref: }
						commit=$(cat $moodle_path/$git_path/$head)
						branch=${head//refs\/heads\/}
					else
						commit=$head
						branch="default"
					fi

					# get the current tag
          refs_path=$moodle_path/$git_path/packed-refs
          ref=$(cat $refs_path | grep $commit | head -n 1)
          if [[ $ref ]]
          then
            A="$(cut -d' ' -f2 <<<$ref)"
            tag=$(basename "$A")
            #tag=$(echo $tag | tr -dc '[:alnum:]\n\r')
            tag=$(echo "${tag//[^[:alnum:]_.-]/}")

          else
            # if no branch or tag can be found try to match one - the 1st - in FETCH_HEAD
            if [[ $branch = "default" ]]; then
              # if the submodule has no FETCH_HEAD do a git pull to get it 1st
              if [ ! -f $moodle_path/$git_path/FETCH_HEAD ]; then
                # preserve current location, cd into the plugin dir, do the pull and cd back
                hic="$(pwd)"
                cd $plugin_path
                git pull >> /dev/null
                cd $hic
              fi
              [[ $verbose ]] && echo "==> trying to find a branch in FETCH_HEAD"
              [[ $logging ]] && echo "==> trying to find a branch in FETCH_HEAD" >> $logfile
              rawline=$(cat $moodle_path/$git_path/FETCH_HEAD | grep $commit | head -n 1 ) # use 1st match
              if [[ $rawline ]]; then
                fetch_branch=$(echo $rawline  | awk -F\' '{print $(NF-1)}') # get the branch name between 2 single quotes
                if [[ $fetch_branch ]]; then
                  branch=$fetch_branch
                fi
              fi
            fi
            tag=$branch
            # unset tag
          fi

          # get the version
					rohversion=$(cat "$plugin_path/version.php" | grep '$plugin->version')
					version=$(echo $rohversion| cut -d'=' -f 2)
					version=$(echo $version| cut -d';' -f 1)

					[[ $verbose ]] && echo "Name = $pluginname"
					[[ $verbose ]] && echo "Repository = $url"
					[[ $verbose ]] && echo "GitHub URL = $githuburl"
					[[ $verbose ]] && echo "Moodle Plugin = $moodle_plugin"
					[[ $verbose ]] && echo "Developer = $mdeveloper"
					[[ $verbose ]] && echo "branch = $branch"
					[[ $verbose ]] && echo "commit ID = $commit"
					[[ $verbose ]] && echo "Version = $version"


					[[ $logging ]] && echo "Name = $pluginname" >> $logfile
					[[ $logging ]] && echo "Repository = $url" >> $logfile
					[[ $logging ]] && echo "GitHub URL = $githuburl" >> $logfile
					[[ $logging ]] && echo "Moodle Plugin = $moodle_plugin" >> $logfile
					[[ $logging ]] && echo "Developer = $developer" >> $logfile
					[[ $logging ]] && echo "branch = $branch" >> $logfile
					[[ $logging ]] && echo "commit ID = $commit" >> $logfile
					[[ $logging ]] && echo "Version = $version" >> $logfile

#WIP start
					if [[ $(cat "$plugin_path/version.php") = *dependencies* ]]
					then
						rawdeps=$(cat "$plugin_path/version.php" | grep '$plugin->dependencies')
						deps=$(cat "$plugin_path/version.php" | cut -d'=' -f 1)
#						[[ $verbose ]] && echo "Dependencies = $deps"
					fi
#WIP end

	            	[[ $verbose ]] && echo && echo "------------------------------------" && echo
					[[ $logging ]] && echo >> $logfile && echo "------------------------------------" >> $logfile && echo >> $logfile

					[[ $verbose ]] || printf "."
					((counter=counter+1))
				    if [ $(expr $counter % 20) = "0" ]; then
				        echo " $counter"
				    fi

	            	echo "$pluginname,$moodle_plugin,$url,$githuburl,$developer,$version,$tag,$branch,$commit" >> $export_file
				fi
   			else
   				walk_dir "$plugin_path"
        	fi
        fi
    done
}

counter=0

walk_dir "$moodle_path"

cd $moodle_path
echo
echo "==> Switching to $moodle_path"
echo "==> Updating submodules to restore original commit"
echo
git submodule update --init --recursive

echo "Extracted information about $counter plugins."
echo
